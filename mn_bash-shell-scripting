Important commands:
===================

===================================BASIC COMMANDS===============================
1. what is our identity?
$: whoami
rajkhare

2. where are we?
$: pwd
/Users/rajkhare/Raj/Udemy/Bash-Shell-Scripting

3. what inside the present working directory?
a. list of all the files and folder
$: ls
Bash-Shell-Intro.pdf			MT-Les2bis-Terminal-Overview.pdf	mn_bash-shell-scripting

b. list of all the files and folder including hidden itesm
$: ls -a
.					.git					MT-Les2bis-Terminal-Overview.pdf
..					Bash-Shell-Intro.pdf			mn_bash-shell-scripting

c. how to read the information about our files and folders?--> very very important to understand
$: ls -l
total 776
-rw-r--r--@ 1 rajkhare  staff  174347 Dec 29 09:10 Bash-Shell-Intro.pdf
-rw-r--r--@ 1 rajkhare  staff  214942 Dec 29 09:15 MT-Les2bis-Terminal-Overview.pdf
-rw-r--r--  1 rajkhare  staff     500 Dec 29 19:57 mn_bash-shell-scripting
drwxr-xr-x  2 rajkhare  staff      64 Dec 29 20:05 testDir
---
|d|->'shows this is directory'|rwx|->'all divided the groups of 3 characters,So any file can be Readable(r),Writable(w) or Executable(x) and 1st 3 characters are refered to the Owners to the file. So here Owner(rajkhare) has the read,write,execute permissions'|r-x|->'2nd 3 characters are refered to the Group to which this file or folder assigned. So here the Group(staff) has read and execute permission only'|r-x|->'3rd groups of 3 charecters refers to Everyone else who is not the Owner and not the User of this Group, So here everyone has the read, and execute permissions only.'  |2|->'this number is not very imp, shows the no. of links this file or folder has' |rajkhare|->'this is the owner'  |staff|->'this is the Group to wchich this testDir folder is assigned'  |64|->'size of the file' |Dec 29 20:05|->'when the file last edited or created' |testDir|->'name of the file or folder'

Note: Every file or directory is assigned to some 'Group' which contains one or more 'Users'
---

d. list of specific directory
$: ls testDir/
test.txt

e. list of specific directory including hidden files.
$ ls -la testDir/
total 8
drwxr-xr-x  3 rajkhare  staff   96 Jan  2 13:00 .
drwxr-xr-x  7 rajkhare  staff  224 Dec 29 20:05 ..
-rw-r--r--  1 rajkhare  staff   34 Jan  2 13:00 test.txt


f. if you want to know about the information about some file:
$ file Bash-Shell-Intro.pdf
Bash-Shell-Intro.pdf: PDF document, version 1.3, 5 pages

4. How we can change the working directory to your home folder?
$ cd
press enter,it will always move to home folder.

5. move 2-folder in one command.
$ cd ../..

6. commad to any type of file/folder from terminal:
$ open [fileName or Foldername]
Note -> . represent the present working directory. so if i do 'open .' then it will open the current folder.
Note -> if you are using Linux...then insetad of open use the xdg-open

7. To create the file or modified the date of file creation we will use the command touch:
$ touch [fileName.fileExtension]

8. To copy one file into another:
$ cp text.txt text-copy.txt
This will create the new file 'text-copy.txt' and copy the content of the text.txt in it.

9. remove the file:
$ rm fileName

9a) remove the folder which haveing some file:
$ rm -r folderName

9b) if you want to prompt the permission notification before removing then use the option -i
$ rm -ri folderName
it will ask your permission in form of  y or n

10. use of * -> '*' means 0 or more 
10a) $ file 1.txt 2.txt
can be used like
$ file *.txt

10b) move every text file in some folder
$ mv *.txt someFolderName

10c) we can remove everythig that start from latter b
$ rm b*

10d) remove everytning inside someFolder
$ rm someFolder/*

11. sometimes we copy a folder to another folder but it is not worked
$ cp A-Folder  B-Folder
cp: A-Folder is a directory (not copied)
in this we should always use the option '-R' -> Recursively
$ cp -R A-Folder  B-Folder

Note: mv command does not required -R, otherwise it work for cp and rm, ls.

========================ADVANCED COMMADS===============================

12. redirect commad '>' redirect the output of any commad inside a file
$ echo "Hello Raj" > newtext.txt
it will create the new file if not present there and put the text there.
Note: Be careful with redirect '>', becuase if the file exists and you run redirect command again then it will override the value of previously present the contents of the file.

12a) if you want to append something on already exsinting file '>>'
$ echo "I want to add this line" >> newtext.txt
then it will add in next line of that flie.

13. we can concatinate output of two or more file using cat command and then redirect to new file
$ cat file1.txt file2.txt > file2.txt

14. '|' -> output of one command can be piped-in to the input to another command
$ ls someFolder | less
Note: '|' pipe uses a temporary file somewhere and then next command can run on it.

14a) we can use this with tail commmand. tail command is useful when we want to see from the last. and number specified the no. of lines you want to see
$ ls
Bash-Shell-Intro.pdf             mn_bash-shell-scripting          test.txt
Exercises                        newtext.txt
MT-Les2bis-Terminal-Overview.pdf test-copy.txt
$ ls | tail -4
mn_bash-shell-scripting
newtext.txt
test-copy.txt
test.txt

15. 'find' -> to search somefile of directory you are interested,
syntax: find [directoryName] -name [file/direcotry name] -type [d/f]

$ find Exercises/ -name atext.txt
Exercises//exercise1/Ex3/atext.txt
so it will return the path that where we can find this file. in above case we need to go inside the Exercise then inside the exercise1/EX/ then we can find the file atext.txt

if nothing find then no output will return
$  find Exercises/ -name atext1.txt

Note: if you pass '-type f' -> only for file
            '-type d' -> only for directory

for e.g:
$ find Exercises/ -type d
Exercises/
Exercises//exercise2
Exercises//exercise1
Exercises//exercise1/Ex3
Exercises//exercise1/Ex3/Stuff


find Exercises/ -type f
Exercises//exercise2/f4.txt
Exercises//exercise2/f1.txt
Exercises//exercise2/f3.txt
Exercises//exercise2/f2.txt
Exercises//exercise1/Ex3/file3.txt
Exercises//exercise1/Ex3/btext.txt
Exercises//exercise1/Ex3/file3.xls
Exercises//exercise1/Ex3/file2.xls
Exercises//exercise1/Ex3/atext.txt
Exercises//exercise1/Ex3/Stuff/file2.txt
Exercises//exercise1/Ex3/Stuff/file3.txt
Exercises//exercise1/Ex3/Stuff/file1.txt
Exercises//exercise1/Ex3/a.xls


16. 'grep' -> used to search the text inside a file. grep is case sensitive
syntax: grep [searchingText] [fileName]

e.g.

$ cat newtext.txt 
Hello Raj
I want to appned in new line

$ grep Raj newtext.txt 
Hello Raj


17. very useful if you want to search grep with case insesitive then use the '-i'
$ grep -i raj newtext.txt
Hello Raj
Note: grep always give the result the line that contains the search word. not like the first word or letter found.

17a) grep -v -> gives the everything except the search you mentioned
$ ls | grep -v t
Exercises
MT-Les2bis-Terminal-Overview.pdf

18) AWK command part-1
awk command useful if want to fetch the information from the file like tabular format etc
$ awk '{print}' text1.txt 
NAME	COUNTRY	SEX 	AGE  POINTS 
Frank	usa	M	32	4323:001
John	usa	M	61	232:002
Mark	italy	M	43	2243:013
Lara	spain	F	32	2321:007
Daila	spain	F	32	1928:032
Robert	germany	M	51	219:121
Lisa	usa	F	22	2314:000
BOB	france	M	27	576:002	
R	italy	M	32	32


18a) if you want to print the first column of this file
$ awk '{print $1}' text1.txt 
NAME
Frank
John
Mark
Lara
Daila
Robert
Lisa
BOB
R

18b) if you want to print the second column of the file
$ awk '{print $2}' text1.txt 
COUNTRY
usa
usa
italy
spain
spain
germany
usa
france
italy


18c) suppose you want to print two column together
$ awk '{print $1,$2}' text1.txt 
NAME COUNTRY
Frank usa
John usa
Mark italy
Lara spain
Daila spain
Robert germany
Lisa usa
BOB france
R italy


18d) other way to pring all the column $0
$ awk '{print $0}' text1.txt 
NAME	COUNTRY	SEX 	AGE  POINTS 
Frank	usa	M	32	4323:001
John	usa	M	61	232:002
Mark	italy	M	43	2243:013
Lara	spain	F	32	2321:007
Daila	spain	F	32	1928:032
Robert	germany	M	51	219:121
Lisa	usa	F	22	2314:000
BOB	france	M	27	576:002	
R	italy	M	32	32

18e) print the last column if you don't know the column number
$ awk '{print $NF}' text1.txt 
POINTS
4323:001
232:002
2243:013
2321:007
1928:032
219:121
2314:000
576:002
32


18f) if you want second last coloumn from the last
$ awk '{print $(NF-1)}' text1.txt 
AGE
32
61
43
32
32
51
22
27
32


19) if you want to explore the line through awk command
for e.g second line
$ awk 'NR==2 {print $0}' text1.txt 
Frank	usa	M	32	4323:001

19a) if you want line no.2 to line no.5
$ awk 'NR==2,NR==5 {print $0}' text1.txt 
Frank	usa	M	32	4323:001
John	usa	M	61	232:002
Mark	italy	M	43	2243:013
Lara	spain	F	32	2321:007

19b) what if you want just line no.2 and line no.5 only, then use ;
$ awk 'NR==2;NR==5 {print $0}' text1.txt 
Frank	usa	M	32	4323:001
Lara	spain	F	32	2321:007

19c) you can use line and column in combination
for e.g you want from line no.1 to line no.5 and only NAME and AGE colomn:
awk 'NR==1,NR==5 {print $1,$4}' text1.txt 
NAME AGE
Frank 32
John 61
Mark 43
Lara 32

19d) suppose we have the file where we have separator is different, in this case awk not able to recognise the coloumn and will print all the lines and column
for.e.g:
$ awk '{print $1}' c-text1.txt 
NAME;COUNTRY;SEX
Frank;usa;M;32;4323:001
John;usa;M;61;232:002
Mark;italy;M;43;2243:013
Lara;spain;F;32;2321:007
Daila;spain;F;32;1928:032
Robert;germany;M;51;219:121
Lisa;usa;F;22;2314:000
BOB;france;M;27;576:002
R;italy;M;32;32

So here it not able to recognize the column 1
But solution to this we can tell to awk commnad that what is the filed separator here by using '-F' option

$ awk -F ";" '{print $1}' c-text1.txt 
NAME
Frank
John
Mark
Lara
Daila
Robert
Lisa
BOB
R

19e) even it work for letter as separator also
$ awk  '{print $0}' text1.txt 
NAME	COUNTRY	SEX 	AGE  POINTS 
Frank	usa	M	32	4323:001
John	usa	M	61	232:002
Mark	italy	M	43	2243:013
Lara	spain	F	32	2321:007
Daila	spain	F	32	1928:032
Robert	germany	M	51	219:121
Lisa	usa	F	22	2314:000
BOB	france	M	27	576:002	
R	italy	M	32	32

so if you take latter u as a sepeator then 
$ awk -F "u"  '{print $1}' text1.txt 
NAME	COUNTRY	SEX 	AGE  POINTS 
Frank	
John	
Mark	italy	M	43	2243:013
Lara	spain	F	32	2321:007
Daila	spain	F	32	1928:032
Robert	germany	M	51	219:121
Lisa	
BOB	france	M	27	576:002	
R	italy	M	32	32



20. Now suppose you want to search a perticular word inside the file for e.g. usa, how can we get using awk
$ awk  '/usa/{print }' text1.txt 
Frank   usa M   32  4323:001
John    usa M   61  232:002
Lisa    usa F   22  2314:000
> so you need to pass the searching word between /searchingWord/, then it will show the all the rows releated to it.

20a) suppose you want to search usa people or italian people then we can use the or '|' symbol in awk
$ awk  '/usa|ital/{print }' text1.txt 
Frank   usa M   32  4323:001
John    usa M   61  232:002
Mark    italy   M   43  2243:013
Lisa    usa F   22  2314:000
R   italy   M   32  32

20b) suppose we want to looking for the letter i but it will give the result based on the finding on the entire rows
$ awk  '/i/{print }' text1.txt 
Mark    italy   M   43  2243:013
Lara    spain   F   32  2321:007
Daila   spain   F   32  1928:032
Lisa    usa F   22  2314:000
R   italy   M   32  32

suppose you want to search the letter i only inside the column 2, then we can use the '~' symbol with coloumn
$ awk  '$2~/i/{print }' text1.txt 
Mark    italy   M   43  2243:013
Lara    spain   F   32  2321:007
Daila   spain   F   32  1928:032
R   italy   M   32  32


20c) suppose you want to serach the rows based on the sames column value
$ awk  '$4==$5 {print }' text1.txt 
R   italy   M   32  32

20d) suppose you want to print first column and then print length of the each word in the coulumn
$ awk  ' {print $1}' text1.txt 
NAME
Frank
John
Mark
Lara
Daila
Robert
Lisa
BOB
R

now print the length of each word in the column
$ awk  ' {print length($1)}' text1.txt 
4
5
4
4
4
5
6
4
3
1
0

suppose you want to print first column along withe the length
$ awk  ' {print $1,length($1)}' text1.txt 
NAME 4
Frank 5
John 4
Mark 4
Lara 4
Daila 5
Robert 6
Lisa 4
BOB 3
R 1
 0


21. sudo -> is useful when you don't have ownership for the file and you have only read permission so you cannot write or delete that file.
so instead of change the owner, sudo will allow you treat as a root user.
$ sudo rm fileName
then it will work

21a) suppose you want to run multiple command using sudo so you need to type sudo in every command. so trick is you can open the new bash using sudo as a root user
$ sudo bash
bash-3.2#

you can check the user
bash-3.2# whoami
root

you can exit from the root user
bash-3.2# exit
exit
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$


22. change owner 'chown' -> command useful when we not own the file so we can chage the owner and another way we did something on that type of file using the sudo.
Note: we can change ownership by using the sudo only -> means by root user only

so we have the file with different owner root
$ ls -lrt
total 840
-rw-r--r--@ 1 rajkhare  staff  174347 Dec 29 09:10 Bash-Shell-Intro.pdf
-rw-r--r--@ 1 rajkhare  staff  214942 Dec 29 09:15 MT-Les2bis-Terminal-Overview.pdf
-rw-r--r--@ 1 rajkhare  staff      42 Jan  2 15:09 test.txt
-rw-r--r--@ 1 rajkhare  staff      42 Jan 12 05:07 test-copy.txt
-rw-r--r--  1 rajkhare  staff      39 Jan 15 05:39 newtext.txt
-rw-r--r--@ 1 rajkhare  staff     246 Jan 16 04:38 text1.txt
drwxr-xr-x  5 rajkhare  staff     160 Jan 16 04:38 Exercises
-rw-r--r--@ 1 rajkhare  staff     246 Jan 16 05:26 c-text1.txt
-rw-r--r--@ 1 rajkhare  staff   13148 Jan 17 05:39 mn_bash-shell-scripting
-rw-r--r--  1 root      staff       0 Jan 17 05:40 chowner.txt

now we can change it to ourself
$ sudo chown rajkhare chowner.txt 
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ ls -lrt
total 840
-rw-r--r--@ 1 rajkhare  staff  174347 Dec 29 09:10 Bash-Shell-Intro.pdf
-rw-r--r--@ 1 rajkhare  staff  214942 Dec 29 09:15 MT-Les2bis-Terminal-Overview.pdf
-rw-r--r--@ 1 rajkhare  staff      42 Jan  2 15:09 test.txt
-rw-r--r--@ 1 rajkhare  staff      42 Jan 12 05:07 test-copy.txt
-rw-r--r--  1 rajkhare  staff      39 Jan 15 05:39 newtext.txt
-rw-r--r--@ 1 rajkhare  staff     246 Jan 16 04:38 text1.txt
drwxr-xr-x  5 rajkhare  staff     160 Jan 16 04:38 Exercises
-rw-r--r--@ 1 rajkhare  staff     246 Jan 16 05:26 c-text1.txt
-rw-r--r--  1 rajkhare  staff       0 Jan 17 05:40 chowner.txt
-rw-r--r--@ 1 rajkhare  staff   13915 Jan 17 05:41 mn_bash-shell-scripting

see the file chowner.txt now it showing the owner as me 'rajkhare' 

23. we can change the group also -> chgrp
$ sudo chgrp _guest chowner.txt 
Password:
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ ls -lrt
total 840
-rw-r--r--@ 1 rajkhare  staff   174347 Dec 29 09:10 Bash-Shell-Intro.pdf
-rw-r--r--@ 1 rajkhare  staff   214942 Dec 29 09:15 MT-Les2bis-Terminal-Overview.pdf
-rw-r--r--@ 1 rajkhare  staff       42 Jan  2 15:09 test.txt
-rw-r--r--@ 1 rajkhare  staff       42 Jan 12 05:07 test-copy.txt
-rw-r--r--  1 rajkhare  staff       39 Jan 15 05:39 newtext.txt
-rw-r--r--@ 1 rajkhare  staff      246 Jan 16 04:38 text1.txt
drwxr-xr-x  5 rajkhare  staff      160 Jan 16 04:38 Exercises
-rw-r--r--@ 1 rajkhare  staff      246 Jan 16 05:26 c-text1.txt
-rw-r--r--  1 rajkhare  _guest       0 Jan 17 05:40 chowner.txt
-rw-r--r--@ 1 rajkhare  staff    14752 Jan 17 05:43 mn_bash-shell-scripting


24. how to change the permission of owner or group or anyone else
u -> owner
g -> group
o -> others

currently see the file chowner.txt we have only read permission to all
$ ls -lrt
total 848
-rw-r--r--@ 1 rajkhare  staff   174347 Dec 29 09:10 Bash-Shell-Intro.pdf
-rw-r--r--@ 1 rajkhare  staff   214942 Dec 29 09:15 MT-Les2bis-Terminal-Overview.pdf
-rw-r--r--@ 1 rajkhare  staff       42 Jan  2 15:09 test.txt
-rw-r--r--@ 1 rajkhare  staff       42 Jan 12 05:07 test-copy.txt
-rw-r--r--  1 rajkhare  staff       39 Jan 15 05:39 newtext.txt
-rw-r--r--@ 1 rajkhare  staff      246 Jan 16 04:38 text1.txt
drwxr-xr-x  5 rajkhare  staff      160 Jan 16 04:38 Exercises
-rw-r--r--@ 1 rajkhare  staff      246 Jan 16 05:26 c-text1.txt
-r--r--r--  1 rajkhare  _guest      13 Jan 18 04:56 chowner.txt
-rw-r--r--@ 1 rajkhare  staff    15685 Jan 18 05:02 mn_bash-shell-scripting


$ chmod u=rw chowner.txt
$ ls -lrt
total 8
-rw-r--r--  1 rajkhare  _guest  13 Jan 18 04:56 chowner.txt

suppose you want others to write only
$ chmod o=w chowner.txt
$ ls -lrt
total 8
-rw-r---w-  1 rajkhare  _guest  13 Jan 18 04:56 chowner.txt


24a) you can do very fast to add executable to all using other way +x
$ chmod +x chowner.txt
$ ls -lrt
total 8
-rwxr-x-wx  1 rajkhare  _guest  13 Jan 18 04:56 chowner.txt

24b) same way you can remove executeble permission to all in very easy way -x
$ chmod -x chowner.txt
$ ls -lrt
total 8
-rw-r---w-  1 rajkhare  _guest  13 Jan 18 04:56 chowner.txt

25. Change Ownership To Folders
let's create a folder own by root
$ sudo mkdir closet
Password:
$ ls -lrt
total 8
-rw-r---w-  1 rajkhare  _guest  13 Jan 18 04:56 chowner.txt
drwxr-xr-x  2 root      staff   64 Jan 18 05:16 closet

also create folder inside closet folder
$ sudo mkdir closet/one
$ sudo mkdir closet/one/two

lets create someting inside the two folder
$ sudo touch closet/one/two/glass.txt

so we have:
$ tree closet/
closet/
└── one
    └── two
        └── glass.txt

3 directories, 1 file

so if you try to remove it:
$ rm closet
rm: closet: is a directory

and if you try recursively then it will ask many times:
$ rm -R closet/
override rw-r--r-- root/staff for closet//one/two/glass.txt? n
override rwxr-xr-x root/staff for closet//one/two? n
override rwxr-xr-x root/staff for closet//one? n
override rwxr-xr-x root/staff for closet/? n

so we can change the ownership recursively as well:
$ sudo chown -R rajkhare closet
Password:
$ ls -Rl closet/
total 0
drwxr-xr-x  3 rajkhare  staff  96 Jan 18 05:18 one

closet//one:
total 0
drwxr-xr-x  3 rajkhare  staff  96 Jan 18 05:19 two

closet//one/two:
total 0
-rw-r--r--  1 rajkhare  staff  0 Jan 18 05:19 glass.txt
so it will change everywhere recuresively the owner name

25a) we can do the same thing to group as well recursively
$ sudo chgrp -R _guest closet
$ ls -Rl closet/
total 0
drwxr-xr-x  3 rajkhare  _guest  96 Jan 18 05:18 one

closet//one:
total 0
drwxr-xr-x  3 rajkhare  _guest  96 Jan 18 05:19 two

closet//one/two:
total 0
-rw-r--r--  1 rajkhare  _guest  0 Jan 18 05:19 glass.txt

now it's own by us so we can remove it easily. it will not prompt every file and foler
$ rm -R closet/
$ ls -lrt
total 8
-rw-r---w-  1 rajkhare  _guest  13 Jan 18 04:56 chowner.txt




































