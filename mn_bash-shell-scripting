Important commands:
===================

===================================BASIC COMMANDS===============================
1. what is our identity?
$: whoami
rajkhare

2. where are we?
$: pwd
/Users/rajkhare/Raj/Udemy/Bash-Shell-Scripting

3. what inside the present working directory?
a. list of all the files and folder
$: ls
Bash-Shell-Intro.pdf			MT-Les2bis-Terminal-Overview.pdf	mn_bash-shell-scripting

b. list of all the files and folder including hidden itesm
$: ls -a
.					.git					MT-Les2bis-Terminal-Overview.pdf
..					Bash-Shell-Intro.pdf			mn_bash-shell-scripting

c. how to read the information about our files and folders?--> very very important to understand
$: ls -l
total 776
-rw-r--r--@ 1 rajkhare  staff  174347 Dec 29 09:10 Bash-Shell-Intro.pdf
-rw-r--r--@ 1 rajkhare  staff  214942 Dec 29 09:15 MT-Les2bis-Terminal-Overview.pdf
-rw-r--r--  1 rajkhare  staff     500 Dec 29 19:57 mn_bash-shell-scripting
drwxr-xr-x  2 rajkhare  staff      64 Dec 29 20:05 testDir
---
|d|->'shows this is directory'|rwx|->'all divided the groups of 3 characters,So any file can be Readable(r),Writable(w) or Executable(x) and 1st 3 characters are refered to the Owners to the file. So here Owner(rajkhare) has the read,write,execute permissions'|r-x|->'2nd 3 characters are refered to the Group to which this file or folder assigned. So here the Group(staff) has read and execute permission only'|r-x|->'3rd groups of 3 charecters refers to Everyone else who is not the Owner and not the User of this Group, So here everyone has the read, and execute permissions only.'  |2|->'this number is not very imp, shows the no. of links this file or folder has' |rajkhare|->'this is the owner'  |staff|->'this is the Group to wchich this testDir folder is assigned'  |64|->'size of the file' |Dec 29 20:05|->'when the file last edited or created' |testDir|->'name of the file or folder'

Note: Every file or directory is assigned to some 'Group' which contains one or more 'Users'
---

d. list of specific directory
$: ls testDir/
test.txt

e. list of specific directory including hidden files.
$ ls -la testDir/
total 8
drwxr-xr-x  3 rajkhare  staff   96 Jan  2 13:00 .
drwxr-xr-x  7 rajkhare  staff  224 Dec 29 20:05 ..
-rw-r--r--  1 rajkhare  staff   34 Jan  2 13:00 test.txt


f. if you want to know about the information about some file:
$ file Bash-Shell-Intro.pdf
Bash-Shell-Intro.pdf: PDF document, version 1.3, 5 pages

4. How we can change the working directory to your home folder?
$ cd
press enter,it will always move to home folder.

5. move 2-folder in one command.
$ cd ../..

6. commad to any type of file/folder from terminal:
$ open [fileName or Foldername]
Note -> . represent the present working directory. so if i do 'open .' then it will open the current folder.
Note -> if you are using Linux...then insetad of open use the xdg-open

7. To create the file or modified the date of file creation we will use the command touch:
$ touch [fileName.fileExtension]

8. To copy one file into another:
$ cp text.txt text-copy.txt
This will create the new file 'text-copy.txt' and copy the content of the text.txt in it.

9. remove the file:
$ rm fileName

9a) remove the folder which haveing some file:
$ rm -r folderName

9b) if you want to prompt the permission notification before removing then use the option -i
$ rm -ri folderName
it will ask your permission in form of  y or n

10. use of * -> '*' means 0 or more 
10a) $ file 1.txt 2.txt
can be used like
$ file *.txt

10b) move every text file in some folder
$ mv *.txt someFolderName

10c) we can remove everythig that start from latter b
$ rm b*

10d) remove everytning inside someFolder
$ rm someFolder/*

11. sometimes we copy a folder to another folder but it is not worked
$ cp A-Folder  B-Folder
cp: A-Folder is a directory (not copied)
in this we should always use the option '-R' -> Recursively
$ cp -R A-Folder  B-Folder

Note: mv command does not required -R, otherwise it work for cp and rm, ls.

========================ADVANCED COMMADS===============================

12. redirect commad '>' redirect the output of any commad inside a file
$ echo "Hello Raj" > newtext.txt
it will create the new file if not present there and put the text there.
Note: Be careful with redirect '>', becuase if the file exists and you run redirect command again then it will override the value of previously present the contents of the file.

12a) if you want to append something on already exsinting file '>>'
$ echo "I want to add this line" >> newtext.txt
then it will add in next line of that flie.

13. we can concatinate output of two or more file using cat command and then redirect to new file
$ cat file1.txt file2.txt > file2.txt

14. '|' -> output of one command can be piped-in to the input to another command
$ ls someFolder | less
Note: '|' pipe uses a temporary file somewhere and then next command can run on it.

14a) we can use this with tail commmand. tail command is useful when we want to see from the last. and number specified the no. of lines you want to see
$ ls
Bash-Shell-Intro.pdf             mn_bash-shell-scripting          test.txt
Exercises                        newtext.txt
MT-Les2bis-Terminal-Overview.pdf test-copy.txt
$ ls | tail -4
mn_bash-shell-scripting
newtext.txt
test-copy.txt
test.txt

15. 'find' -> to search somefile of directory you are interested,
syntax: find [directoryName] -name [file/direcotry name] -type [d/f]

$ find Exercises/ -name atext.txt
Exercises//exercise1/Ex3/atext.txt
so it will return the path that where we can find this file. in above case we need to go inside the Exercise then inside the exercise1/EX/ then we can find the file atext.txt

if nothing find then no output will return
$  find Exercises/ -name atext1.txt

Note: if you pass '-type f' -> only for file
            '-type d' -> only for directory

for e.g:
$ find Exercises/ -type d
Exercises/
Exercises//exercise2
Exercises//exercise1
Exercises//exercise1/Ex3
Exercises//exercise1/Ex3/Stuff


find Exercises/ -type f
Exercises//exercise2/f4.txt
Exercises//exercise2/f1.txt
Exercises//exercise2/f3.txt
Exercises//exercise2/f2.txt
Exercises//exercise1/Ex3/file3.txt
Exercises//exercise1/Ex3/btext.txt
Exercises//exercise1/Ex3/file3.xls
Exercises//exercise1/Ex3/file2.xls
Exercises//exercise1/Ex3/atext.txt
Exercises//exercise1/Ex3/Stuff/file2.txt
Exercises//exercise1/Ex3/Stuff/file3.txt
Exercises//exercise1/Ex3/Stuff/file1.txt
Exercises//exercise1/Ex3/a.xls


16. 'grep' -> used to search the text inside a file. grep is case sensitive
syntax: grep [searchingText] [fileName]

e.g.

$ cat newtext.txt 
Hello Raj
I want to appned in new line

$ grep Raj newtext.txt 
Hello Raj


17. very useful if you want to search grep with case insesitive then use the '-i'
$ grep -i raj newtext.txt
Hello Raj
Note: grep always give the result the line that contains the search word. not like the first word or letter found.

17a) grep -v -> gives the everything except the search you mentioned
$ ls | grep -v t
Exercises
MT-Les2bis-Terminal-Overview.pdf

18) AWK command part-1
awk command useful if want to fetch the information from the file like tabular format etc
$ awk '{print}' text1.txt 
NAME	COUNTRY	SEX 	AGE  POINTS 
Frank	usa	M	32	4323:001
John	usa	M	61	232:002
Mark	italy	M	43	2243:013
Lara	spain	F	32	2321:007
Daila	spain	F	32	1928:032
Robert	germany	M	51	219:121
Lisa	usa	F	22	2314:000
BOB	france	M	27	576:002	
R	italy	M	32	32


18a) if you want to print the first column of this file
$ awk '{print $1}' text1.txt 
NAME
Frank
John
Mark
Lara
Daila
Robert
Lisa
BOB
R

18b) if you want to print the second column of the file
$ awk '{print $2}' text1.txt 
COUNTRY
usa
usa
italy
spain
spain
germany
usa
france
italy


18c) suppose you want to print two column together
$ awk '{print $1,$2}' text1.txt 
NAME COUNTRY
Frank usa
John usa
Mark italy
Lara spain
Daila spain
Robert germany
Lisa usa
BOB france
R italy


18d) other way to pring all the column $0
$ awk '{print $0}' text1.txt 
NAME	COUNTRY	SEX 	AGE  POINTS 
Frank	usa	M	32	4323:001
John	usa	M	61	232:002
Mark	italy	M	43	2243:013
Lara	spain	F	32	2321:007
Daila	spain	F	32	1928:032
Robert	germany	M	51	219:121
Lisa	usa	F	22	2314:000
BOB	france	M	27	576:002	
R	italy	M	32	32

18e) print the last column if you don't know the column number
$ awk '{print $NF}' text1.txt 
POINTS
4323:001
232:002
2243:013
2321:007
1928:032
219:121
2314:000
576:002
32


18f) if you want second last coloumn from the last
$ awk '{print $(NF-1)}' text1.txt 
AGE
32
61
43
32
32
51
22
27
32


19) if you want to explore the line through awk command
for e.g second line
$ awk 'NR==2 {print $0}' text1.txt 
Frank	usa	M	32	4323:001

19a) if you want line no.2 to line no.5
$ awk 'NR==2,NR==5 {print $0}' text1.txt 
Frank	usa	M	32	4323:001
John	usa	M	61	232:002
Mark	italy	M	43	2243:013
Lara	spain	F	32	2321:007

19b) what if you want just line no.2 and line no.5 only, then use ;
$ awk 'NR==2;NR==5 {print $0}' text1.txt 
Frank	usa	M	32	4323:001
Lara	spain	F	32	2321:007

19c) you can use line and column in combination
for e.g you want from line no.1 to line no.5 and only NAME and AGE colomn:
awk 'NR==1,NR==5 {print $1,$4}' text1.txt 
NAME AGE
Frank 32
John 61
Mark 43
Lara 32

19d) suppose we have the file where we have separator is different, in this case awk not able to recognise the coloumn and will print all the lines and column
for.e.g:
$ awk '{print $1}' c-text1.txt 
NAME;COUNTRY;SEX
Frank;usa;M;32;4323:001
John;usa;M;61;232:002
Mark;italy;M;43;2243:013
Lara;spain;F;32;2321:007
Daila;spain;F;32;1928:032
Robert;germany;M;51;219:121
Lisa;usa;F;22;2314:000
BOB;france;M;27;576:002
R;italy;M;32;32

So here it not able to recognize the column 1
But solution to this we can tell to awk commnad that what is the filed separator here by using '-F' option

$ awk -F ";" '{print $1}' c-text1.txt 
NAME
Frank
John
Mark
Lara
Daila
Robert
Lisa
BOB
R

19e) even it work for letter as separator also
$ awk  '{print $0}' text1.txt 
NAME	COUNTRY	SEX 	AGE  POINTS 
Frank	usa	M	32	4323:001
John	usa	M	61	232:002
Mark	italy	M	43	2243:013
Lara	spain	F	32	2321:007
Daila	spain	F	32	1928:032
Robert	germany	M	51	219:121
Lisa	usa	F	22	2314:000
BOB	france	M	27	576:002	
R	italy	M	32	32

so if you take latter u as a sepeator then 
$ awk -F "u"  '{print $1}' text1.txt 
NAME	COUNTRY	SEX 	AGE  POINTS 
Frank	
John	
Mark	italy	M	43	2243:013
Lara	spain	F	32	2321:007
Daila	spain	F	32	1928:032
Robert	germany	M	51	219:121
Lisa	
BOB	france	M	27	576:002	
R	italy	M	32	32



20. Now suppose you want to search a perticular word inside the file for e.g. usa, how can we get using awk
$ awk  '/usa/{print }' text1.txt 
Frank   usa M   32  4323:001
John    usa M   61  232:002
Lisa    usa F   22  2314:000
> so you need to pass the searching word between /searchingWord/, then it will show the all the rows releated to it.

20a) suppose you want to search usa people or italian people then we can use the or '|' symbol in awk
$ awk  '/usa|ital/{print }' text1.txt 
Frank   usa M   32  4323:001
John    usa M   61  232:002
Mark    italy   M   43  2243:013
Lisa    usa F   22  2314:000
R   italy   M   32  32

20b) suppose we want to looking for the letter i but it will give the result based on the finding on the entire rows
$ awk  '/i/{print }' text1.txt 
Mark    italy   M   43  2243:013
Lara    spain   F   32  2321:007
Daila   spain   F   32  1928:032
Lisa    usa F   22  2314:000
R   italy   M   32  32

suppose you want to search the letter i only inside the column 2, then we can use the '~' symbol with coloumn
$ awk  '$2~/i/{print }' text1.txt 
Mark    italy   M   43  2243:013
Lara    spain   F   32  2321:007
Daila   spain   F   32  1928:032
R   italy   M   32  32


20c) suppose you want to serach the rows based on the sames column value
$ awk  '$4==$5 {print }' text1.txt 
R   italy   M   32  32

20d) suppose you want to print first column and then print length of the each word in the coulumn
$ awk  ' {print $1}' text1.txt 
NAME
Frank
John
Mark
Lara
Daila
Robert
Lisa
BOB
R

now print the length of each word in the column
$ awk  ' {print length($1)}' text1.txt 
4
5
4
4
4
5
6
4
3
1
0

suppose you want to print first column along withe the length
$ awk  ' {print $1,length($1)}' text1.txt 
NAME 4
Frank 5
John 4
Mark 4
Lara 4
Daila 5
Robert 6
Lisa 4
BOB 3
R 1
 0


21. sudo -> is useful when you don't have ownership for the file and you have only read permission so you cannot write or delete that file.
so instead of change the owner, sudo will allow you treat as a root user.
$ sudo rm fileName
then it will work

21a) suppose you want to run multiple command using sudo so you need to type sudo in every command. so trick is you can open the new bash using sudo as a root user
$ sudo bash
bash-3.2#

you can check the user
bash-3.2# whoami
root

you can exit from the root user
bash-3.2# exit
exit
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$


22. change owner 'chown' -> command useful when we not own the file so we can chage the owner and another way we did something on that type of file using the sudo.
Note: we can change ownership by using the sudo only -> means by root user only

so we have the file with different owner root
$ ls -lrt
total 840
-rw-r--r--@ 1 rajkhare  staff  174347 Dec 29 09:10 Bash-Shell-Intro.pdf
-rw-r--r--@ 1 rajkhare  staff  214942 Dec 29 09:15 MT-Les2bis-Terminal-Overview.pdf
-rw-r--r--@ 1 rajkhare  staff      42 Jan  2 15:09 test.txt
-rw-r--r--@ 1 rajkhare  staff      42 Jan 12 05:07 test-copy.txt
-rw-r--r--  1 rajkhare  staff      39 Jan 15 05:39 newtext.txt
-rw-r--r--@ 1 rajkhare  staff     246 Jan 16 04:38 text1.txt
drwxr-xr-x  5 rajkhare  staff     160 Jan 16 04:38 Exercises
-rw-r--r--@ 1 rajkhare  staff     246 Jan 16 05:26 c-text1.txt
-rw-r--r--@ 1 rajkhare  staff   13148 Jan 17 05:39 mn_bash-shell-scripting
-rw-r--r--  1 root      staff       0 Jan 17 05:40 chowner.txt

now we can change it to ourself
$ sudo chown rajkhare chowner.txt 
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ ls -lrt
total 840
-rw-r--r--@ 1 rajkhare  staff  174347 Dec 29 09:10 Bash-Shell-Intro.pdf
-rw-r--r--@ 1 rajkhare  staff  214942 Dec 29 09:15 MT-Les2bis-Terminal-Overview.pdf
-rw-r--r--@ 1 rajkhare  staff      42 Jan  2 15:09 test.txt
-rw-r--r--@ 1 rajkhare  staff      42 Jan 12 05:07 test-copy.txt
-rw-r--r--  1 rajkhare  staff      39 Jan 15 05:39 newtext.txt
-rw-r--r--@ 1 rajkhare  staff     246 Jan 16 04:38 text1.txt
drwxr-xr-x  5 rajkhare  staff     160 Jan 16 04:38 Exercises
-rw-r--r--@ 1 rajkhare  staff     246 Jan 16 05:26 c-text1.txt
-rw-r--r--  1 rajkhare  staff       0 Jan 17 05:40 chowner.txt
-rw-r--r--@ 1 rajkhare  staff   13915 Jan 17 05:41 mn_bash-shell-scripting

see the file chowner.txt now it showing the owner as me 'rajkhare' 

23. we can change the group also -> chgrp
$ sudo chgrp _guest chowner.txt 
Password:
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ ls -lrt
total 840
-rw-r--r--@ 1 rajkhare  staff   174347 Dec 29 09:10 Bash-Shell-Intro.pdf
-rw-r--r--@ 1 rajkhare  staff   214942 Dec 29 09:15 MT-Les2bis-Terminal-Overview.pdf
-rw-r--r--@ 1 rajkhare  staff       42 Jan  2 15:09 test.txt
-rw-r--r--@ 1 rajkhare  staff       42 Jan 12 05:07 test-copy.txt
-rw-r--r--  1 rajkhare  staff       39 Jan 15 05:39 newtext.txt
-rw-r--r--@ 1 rajkhare  staff      246 Jan 16 04:38 text1.txt
drwxr-xr-x  5 rajkhare  staff      160 Jan 16 04:38 Exercises
-rw-r--r--@ 1 rajkhare  staff      246 Jan 16 05:26 c-text1.txt
-rw-r--r--  1 rajkhare  _guest       0 Jan 17 05:40 chowner.txt
-rw-r--r--@ 1 rajkhare  staff    14752 Jan 17 05:43 mn_bash-shell-scripting


24. how to change the permission of owner or group or anyone else
u -> owner
g -> group
o -> others

currently see the file chowner.txt we have only read permission to all
$ ls -lrt
total 848
-rw-r--r--@ 1 rajkhare  staff   174347 Dec 29 09:10 Bash-Shell-Intro.pdf
-rw-r--r--@ 1 rajkhare  staff   214942 Dec 29 09:15 MT-Les2bis-Terminal-Overview.pdf
-rw-r--r--@ 1 rajkhare  staff       42 Jan  2 15:09 test.txt
-rw-r--r--@ 1 rajkhare  staff       42 Jan 12 05:07 test-copy.txt
-rw-r--r--  1 rajkhare  staff       39 Jan 15 05:39 newtext.txt
-rw-r--r--@ 1 rajkhare  staff      246 Jan 16 04:38 text1.txt
drwxr-xr-x  5 rajkhare  staff      160 Jan 16 04:38 Exercises
-rw-r--r--@ 1 rajkhare  staff      246 Jan 16 05:26 c-text1.txt
-r--r--r--  1 rajkhare  _guest      13 Jan 18 04:56 chowner.txt
-rw-r--r--@ 1 rajkhare  staff    15685 Jan 18 05:02 mn_bash-shell-scripting


$ chmod u=rw chowner.txt
$ ls -lrt
total 8
-rw-r--r--  1 rajkhare  _guest  13 Jan 18 04:56 chowner.txt

suppose you want others to write only
$ chmod o=w chowner.txt
$ ls -lrt
total 8
-rw-r---w-  1 rajkhare  _guest  13 Jan 18 04:56 chowner.txt


24a) you can do very fast to add executable to all using other way +x
$ chmod +x chowner.txt
$ ls -lrt
total 8
-rwxr-x-wx  1 rajkhare  _guest  13 Jan 18 04:56 chowner.txt

24b) same way you can remove executeble permission to all in very easy way -x
$ chmod -x chowner.txt
$ ls -lrt
total 8
-rw-r---w-  1 rajkhare  _guest  13 Jan 18 04:56 chowner.txt

25. Change Ownership To Folders
let's create a folder own by root
$ sudo mkdir closet
Password:
$ ls -lrt
total 8
-rw-r---w-  1 rajkhare  _guest  13 Jan 18 04:56 chowner.txt
drwxr-xr-x  2 root      staff   64 Jan 18 05:16 closet

also create folder inside closet folder
$ sudo mkdir closet/one
$ sudo mkdir closet/one/two

lets create someting inside the two folder
$ sudo touch closet/one/two/glass.txt

so we have:
$ tree closet/
closet/
└── one
    └── two
        └── glass.txt

3 directories, 1 file

so if you try to remove it:
$ rm closet
rm: closet: is a directory

and if you try recursively then it will ask many times:
$ rm -R closet/
override rw-r--r-- root/staff for closet//one/two/glass.txt? n
override rwxr-xr-x root/staff for closet//one/two? n
override rwxr-xr-x root/staff for closet//one? n
override rwxr-xr-x root/staff for closet/? n

so we can change the ownership recursively as well:
$ sudo chown -R rajkhare closet
Password:
$ ls -Rl closet/
total 0
drwxr-xr-x  3 rajkhare  staff  96 Jan 18 05:18 one

closet//one:
total 0
drwxr-xr-x  3 rajkhare  staff  96 Jan 18 05:19 two

closet//one/two:
total 0
-rw-r--r--  1 rajkhare  staff  0 Jan 18 05:19 glass.txt
so it will change everywhere recuresively the owner name

25a) we can do the same thing to group as well recursively
$ sudo chgrp -R _guest closet
$ ls -Rl closet/
total 0
drwxr-xr-x  3 rajkhare  _guest  96 Jan 18 05:18 one

closet//one:
total 0
drwxr-xr-x  3 rajkhare  _guest  96 Jan 18 05:19 two

closet//one/two:
total 0
-rw-r--r--  1 rajkhare  _guest  0 Jan 18 05:19 glass.txt

now it's own by us so we can remove it easily. it will not prompt every file and foler
$ rm -R closet/
$ ls -lrt
total 8
-rw-r---w-  1 rajkhare  _guest  13 Jan 18 04:56 chowner.txt

26. How to assign the values to the variables:
$ echo "this is the line"
this is the line

$ myvar=573
->just equal sign give the any value(number,string) to the variable
Note: there must be no space between eqaul sign and value.

$ echo "$myvar"
573
->We put the $beforeVariableName to fetch the value of the varable

26a) we can use with other string as well
$ echo "the value of my variable is $myvar"
the value of my variable is 573

27. How to we unset the variable?
$ unset myvar

$ echo "$myvar"

Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ 
-> this will give no value.

27a) there is another way to access the variable using $ and {}
$ myvar="this is raj"
$ echo $myvar
this is raj
-> another way:
$ echo ${myvar}
this is raj
-> but this syntax is not much used.

27b) but other way give the clear picture to system that what variable you are accessing for e.g
$ echo $myvarAA

-> this will give nothing but if you use the {} then system is able to understand.
$ echo ${myvar}AA
this is rajAA


27c) you can use it any command as well:
$ mycommand1=ls
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ $mycommand1 
Bash-Shell-Intro.pdf             mn_bash-shell-scripting          test.txt
Exercises                        newtext.txt                      text1.txt
MT-Les2bis-Terminal-Overview.pdf permissions
c-text1.txt                      test-copy.txt

27d) there is also variables that are saved in the system. these are called envirionment variables:
for e.g if i use the USER environment variable then i get the name of my machine.
$ echo $USER
rajkhare

$ echo $HOME
/Users/rajkhare

very very important environment variable is PATH.
$ echo $PATH
/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin


28. Extremely useful use of variable is -> put the command inside it.
to use it syntax is $(command) -> this will give the output of the command for e.g
$ d=$(ls)
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ echo $d
Bash-Shell-Intro.pdf Exercises MT-Les2bis-Terminal-Overview.pdf c-text1.txt mn_bash-shell-scripting newtext.txt permissions test-copy.txt test.txt text1.txt

$(command) -> is also called command substitution.

so creating your own variable is very useful.
$ myBash=$(pwd)
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ cd
Rajs-MacBook-Air:~ rajkhare$ ls $myBash 
Bash-Shell-Intro.pdf             mn_bash-shell-scripting          test.txt
Exercises                        newtext.txt                      text1.txt
MT-Les2bis-Terminal-Overview.pdf permissions
c-text1.txt                      test-copy.txt

you can copy directly using the variable:
$myBash 
Rajs-MacBook-Air:~ rajkhare$ cd $myBash 
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ ls
Bash-Shell-Intro.pdf             install.sh                       test-copy.txt
Exercises                        mn_bash-shell-scripting          test.txt
MT-Les2bis-Terminal-Overview.pdf newtext.txt                      text1.txt
c-text1.txt                      permissions

28a) Another way to command substitution is Backticks: ` `
$ echo "$(date)"
Sat Jan 20 04:09:06 IST 2024
-> same way we can use using backticks
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ echo "`date`"
Sat Jan 20 04:09:16 IST 2024

> I don't recommanded to usd backticks `` use the $() instead of it. it has clear readiblility


29. suppose you want to set the variable permanately. because one you close the terminal, whatever value you have saved will be lost. so there is a way that you can set it even if you restart the terminal.

one thing the terminal do one it's login it look for the login scripts from your $HOME folder and load values from there.
it depends on your system but it will be one of from these scripts files:

    .profile
    .bashrc
    .bash_profile
    .login

now open the file and put value there it will always shows once you start new terminal  

$ vi ~/.bash_profile    

->not put the value
# my custom messages
echo "Hello Mr. Raj, I am at your service :)"

-> it will shwo like this if you start new terminal:
Last login: Sun Jan 21 10:43:42 on ttys003
Hello Mr. Raj, I am at your service :)


29a)if you don't want to exit the terminal then you can load the script by using the source command:
$ source ~/.bash_profile 
Hello Mr. Raj, I am at your service :)
Note: we can use $HOME as ~ symbol as well.

30. read -> is used for the puttting the some value inside the variable.
$ read myVar
this is i am putting the value using the read command

$ echo $myVar
this is i am putting the value using the read command

30a) we can use the type -p if you want to show some lines before coming it.
$ read -p "Type your age " age
Type your age 41
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ echo $age
41

30b) if you don't want to show something like password(invisible text) then you can use the -s option
$ read  -s [varaibleName for password]

30c) you can use the both option combie like -ps for prepromt and password text
$ read -sp "Passoword: " password
Passoword: Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ echo $password 
efforts007

======================================SHELL SCRIPTING====================================

1. Introduction:
  creating the shell script like a create the program in any programming laguagage.

  > The Terminally usually allows just one command at a time.
  > Shell Scripts allows you to combine and run multiple commands together.
  > Shell Scripts also allows you to use if-else statements and loops.

  use-case:

  > Choose a file, create 1540 copies of it with differents names and put those into different folders you also create...

  it is almost impossible with mouse or with terminal, but you could combine those commands together in Script that do:

       Sequence of the commands

  a) Ask files to copy
  b) Save file name in a variable
  c) Ask numbers of copies and locations to copy to
  d) Save those it other variables
  e) Create the desired folders
  f) Create a loop that copy the file the desired number of times, in the desired locations.

2. how to execute the an executable file.
   
   $ ./shortscript.txt 
   Hello
   bye

-> |./|=> location of the file  |shortscript.txt|=> name of the file.

Note: we only need to give the location of the file and give the name of the file. that's it. it is not like you only need to give the ./  :)


3. So everytime when you time ls for pwd. Actually these are the programs that executes. but where these programs contained inside the system?

to know that we use the 'which' command.

$ which ls
/bin/ls

$ which pwd
/bin/pwd
Rajs-MacBook-Air:shell-scripts rajkhare$ which bash
/bin/bash

-> you cannot open directly from the explorer these locations. but we can open through terminal:
$ cd /
Rajs-MacBook-Air:/ rajkhare$ ls
Applications System       Volumes      cores        etc          opt          sbin         usr
Library      Users        bin          dev          home         private      tmp          var
Rajs-MacBook-Air:/ rajkhare$ open bin

$ which javac
/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin/javac

4. write our first shell script:
--
#! /bin/bash

echo this is my script

#this is the comment for myself
#they do not affect in any way the program 

--
|#!|=> marker |/bin/bash| =>Location of the program

script lines
script lines

#comment

--

5. previously we write the shell script file 'myscript.txt', but this is not the best way for the file extension for a shell file. here we put the file extension .txt that is not correct. we should give the file extension for it '.sh'

so we rename it:
$ mv myscript.txt myscript.sh
Rajs-MacBook-Air:shell-scripts rajkhare$ ls
myscript.sh


6. how to run shell scripts from anywhere like our ls or other commands are worked.
for that we need to add the full folder path in the PATH variable for that.
Note: every command in the terminal is an executable scripts.

$ pwd
/Users/rajkhare/Raj/Udemy/Bash-Shell-Scripting/shell-scripts
-> so we need to add this path in our PATH variable so inside it any scripts can directly run.
note in PATH vaiable every path is seperated by ':'

How to add it?
for this we need to apply the techniques that how to manipulated the variables:
$  var=abc
Rajs-MacBook-Air:shell-scripts rajkhare$ echo $var
abc
$ var="xyz:${var}"
Rajs-MacBook-Air:shell-scripts rajkhare$ echo $var
xyz:abc

so same thing we can apply and we will do in inside the login script at our home path:

$ pwd
/Users/rajkhare/Raj/Udemy/Bash-Shell-Scripting/shell-scripts
Rajs-MacBook-Air:shell-scripts rajkhare$ cd
Rajs-MacBook-Air:~ rajkhare$ ls -a
.                   .bash_history       .gitconfig          .viminfo            Library             gitrepos
..                  .bash_profile       .lemminx            .zsh_history        Movies              install.sh
.CFUserTextEncoding .bash_sessions      .lesshst            .zsh_sessions       Music
.DS_Store           .cache              .m2                 Desktop             Pictures
.Trash              .config             .p2                 Documents           Public
.android            .eclipse            .vim                Downloads           Raj
Rajs-MacBook-Air:~ rajkhare$ vi .bash_profile 

#Add the custom path
PATH="/Users/rajkhare/Raj/Udemy/Bash-Shell-Scripting/shell-scripts:${PATH}"
export PATH

Rajs-MacBook-Air:~ rajkhare$ source .bash_profile 
Hello Mr. Raj, I am at your service :)
Rajs-MacBook-Air:~ rajkhare$ cd -
/Users/rajkhare/Raj/Udemy/Bash-Shell-Scripting/shell-scripts
Rajs-MacBook-Air:shell-scripts rajkhare$ ls
myscript.sh
Rajs-MacBook-Air:shell-scripts rajkhare$ myscript.sh
What is your name: RAj
Hello RAj nice to meet you

$ echo $PATH
/Users/rajkhare/Raj/Udemy/Bash-Shell-Scripting/shell-scripts:/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin:/Library/Java/JavaVirtualMachines/jdk-17.jdk/Contents/Home/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin


=========================SHELL SCRIPTING OPERATIONS========================

1. you can not do the airtmatic operations on the shell scripting 
$ echo "2+3"
2+3

to solve that we need to use the airthmatic operations, it is similar to the commad oepartaions but with the double brackeats so we can use like this:

$ echo "$((2+3))"
5


so like this we can do the shell scripting operations on every arithmatics operations from those operations.


2. we can use the conditions like if else also using the shell scripts.
syntax:

2a) if conditions:

if [conditions]; then
    statements
fi

.....
.....


e.g
------------
#! /bin/bash

echo "hello..."

if [ 3 -eq 3 ]; then
   echo "yes they are the same"
fi

echo "continue with your program"
echo "bye"
-------------------------

some numberic conditons statements e.g.:
======

3 -eq 3  =>  3=3
3 -ne 4  =>  3!=4
3 -gt 1  =>  3>1
3 -lt 7  =>  3<7
3 -ge 3  =>  3>=3
3 -le 3  =>  3<=3

=====

2b) else conditions.
we can put the else condition with if conditions

syntax:
---

if [conditions]; then
    statements
else
    statements    
fi

.....
.....


e.g
------------
#! /bin/bash

read -p "how old are you?" age

if [ $age -gt 100 ]; then
   echo "you are not very young"
else
   echo "you are still very young" 

fi

echo "bye"
-------------------------



2c) if-else conditions:
we can use the if-else conditions also.
syntax:
=======

#! /bin/bash

read -p "type a integer between 1 and 4: " num

if [ $num ==  1 ]; then
   echo "typed 1"
  elif [ $num == 2 ]; then
     echo "typed 2"
   elif [ $num == 3 ]; then
     echo "typed 3"
   elif [ $num == 4 ]; then
     echo "typed 4"
   else
     echo "none of the above"

fi

echo "bye"
================


3. Exit

3a) first we need to pay attention that we need to put the spaces between square brackets in if or elif 
  conditions, otherwise on running the space it will give the errors.

3b) when all the lines inside the scripts runs then it comes out of the script but we can between out of the scripts using the exit keyword.

e.g

#! /bin/bash

echo "line 1"  
echo "line 2"  
echo "line 3"
exit
echo "line4"  
echo "line5"
-------------

so this scrpt will show till line3 only.

so why we use the 'exit'? 
this is very useful when we use the conditional statments.

for e.g:
-----
#! /bin/bash

echo "line 1"  
echo "line 2"  
echo "line 3"
echo "line4"  
echo "line5"

read -p "How old are you? " age
if [ $age -lt 0 ]; then
    echo "You cannot have the negative age!"
    echo "Sorry this number could mess up the Shell"
    echo "The program have to quit now!"
    echo "**************************************"
    exit
fi  

echo " "
echo "Ok let's continue with the script:"
echo "line6"
echo "line7..........."

--------------------

4. OR conditions  '-o'

4a)we can use the or conditions in conditional statements:

for e.g:
---------

#! /bin/bash

read -p "How old are you? " age

if [ $age -lt 0 -o $age -gt 200 ]; then
    echo "Number Not Acceptable"
    exit
fi

echo "let us continue"    

------------------

4b) we can use the 'and' conditions as well
for e.g:
----
#! /bin/bash

read -p "How old are you? " age

if [ $age -lt 0 -o $age -gt 200 ]; then
    echo "Number Not Acceptable"
    exit
fi

if [ $age -lt 64 -a $age -gt 26 ]; then
    echo "you are between 26 and 64"
    exit
fi

echo "let us continue" 
-------------

5. if you want to compare two strings:

e.g:
-------
#! /bin/bash

echo "hello"

if [ "abcd" == "abcd" ]; then
    echo "EQUAL !"
fi

echo "movig on"
---------

similar we can do the other conditions also:

e.g:
-------
#! /bin/bash

echo "hello"

if [ "abcd" == "abcd" ]; then
    echo "EQUAL !"
fi

echo "movig on"

echo "----------------"

if [ "abcd" != "abcd" ]; then
    echo "DIFFERENT !"
fi

echo "end"
---------

6. we can check if the string is empty using the '-z'

e.g:
---
#! /bin/bash

read -p "Type something: " str
if [ -z $str ]; then
    echo "this is an empty string"
    exit
fi

echo "moving on"
-------


Note: if you are putting space beween string while typing input, then it will considered as two seperate strings.

but if i wrap declareion inside string then we can give space strings to it.

e.g:
---
#! /bin/bash

read -p "Type something: " str
if [ -z "$str" ]; then
    echo "this is an empty string"
    exit
fi

echo "moving on"
-------

7. conditions on the files:
the sturcture of conditions on files is same is conditions on
suppose you want to check some files exists or not you can write following scripts:
we can use the '-e' options to check if the file exists or not?

e.g:
----
#! /bin/bash

# Conditions to check if the a file EXISTS
read -p "give me the name of the file: " myfile
if [ -e $myfile ]; then
    echo "$myfile EXISTS"
fi

# Conditions to check if the a file is REGULAR FILE
if [ -f $myfile ]; then
    echo "$myfile is a REGULAR FILE"
else 
    echo "$myfile is NOT a REGULAR FILE"    
fi

# NEGATE A Condition

if [ ! -e $myfile ]; then
    echo "$myfile NOT EXISTS"
fi

# to check Directory Condition

if [ -d $myfile ]; then
    echo "$myfile is a DIRECTORY"
else
    echo "$myfile is NOT a DIRECTORY"   
fi

# Condition to check if the file is READABLE

if [ -r $myfile ]; then
    echo "$myfile is READABLE"
else 
    echo "$myfile is NOT READABLE"  
fi

# Condition to check if the file is WRITABLE

if [ -w $myfile ]; then
    echo "$myfile is WRITABLE"
else 
    echo "$myfile is NOT WRITABLE"  
fi

# Condition to check if the file is empty

if [ -s $myfile ]; then
    echo "$myfile is NOT EMPTY"
else
    echo "$myfile is EMPTY" 

fi

# Condition to check if the file is EXECUTABLE

if [ -x $myfile ]; then
    echo "$myfile is EXECUTABLE"
else
    echo "$myfile NOT EXECUTABLE"   

fi
echo "END"   
-----------

8. loops in the scripting: for loop

e.g:
------------
#! /bin/bash


echo "some lines of codes here"

for i in {1,2,3,4}
do
    echo "hello"
done

echo "we continue..."
---------------
output:
----
Rajs-MacBook-Air:loops rajkhare$ ./loops.sh 
some lines of codes here
hello 
hello 
hello 
hello 
we continue...


----------
8a)this is another way to writing for loop:
-----

e.g:
----
#! /bin/bash


echo "some lines of codes here"

for i in {1..7}
do
    echo "hello this is the number $i"
done

echo "we continue..."   
---------------

OUTPUT:

Rajs-MacBook-Air:loops rajkhare$ ./loops.sh 
some lines of codes here
hello this is the number 1
hello this is the number 2
hello this is the number 3
hello this is the number 4
hello this is the number 5
hello this is the number 6
hello this is the number 7
we continue...

--------------

8b)very interesging things to know that i can have any value; it's not restricted to the numbers only. for e.g:

---
e.g:
---
#! /bin/bash


echo "some lines of codes here"

for i in {1,"dog",-5,"hello","something",-8}
do
    echo "hello this is the value:  $i"
done

echo "we continue..."   
----------
OUTPUT:

some lines of codes here
hello this is the value:  1
hello this is the value:  dog
hello this is the value:  -5
hello this is the value:  hello
hello this is the value:  something
hello this is the value:  -8
we continue...
--------

8c) exteremly useful commands to loop is 'break'; because sometimes you want to break the loop in middle.
-----
#! /bin/bash


echo "some lines of codes here"

for i in {1,"dog","danger","hello","something",-8}
do
    echo "hello this is the value:  $i"
    if [ $i == "danger" ]; then
        echo "* We have to STOP loop here *"
    break
    fi
done

echo "we continue..."   
-------
OUTPUT:
some lines of codes here
hello this is the value:  1
hello this is the value:  dog
hello this is the value:  danger
* We have to STOP loop here *
we continue...
----------

8d) for loop is very useful on the files.
for e.g if we want to list all the files in any directory using the for loop:

-----
#! /bin/bash


echo "some lines of codes here"

for i in ./*
do
    echo "name of the file is:  $i"
done    
--------
OUTPUT:
--
 some lines of codes here
name of the file is:    ./loops.sh
-----

--------------------------------------------
9. Top 5 Mistakes in Bash Shell Scripting!
----------------------------------------
1. always put the spaces in sides the if condtions otherwiese it will not work.
2. never give the space when you are declaring the variable.
3. always wrap the calling time of variable so it will not considerd as two values. for. eg.
   
   a="hello there"
   
   if [ "$a" == "hello there" ]; then  -> then it will not considered the two value like hello and there.
4. mistaked do when append the variable so we need to use the proper syntax.
  
  a="hello"
  b="yesterday"

  echo "${a}${b}"  -> this is the correct way to acces the value of the variable.

5. always use the double quotes not the single quotes in the commads like echo. single code always preserve the valeu so it will not interpret the $variablename.
-------------------------------------------------
-------------------------------------------------------------------------------

10. While loop:

e.g:
-------------
#! /bin/bash


echo "some lines of codes here"

number=1
while [ $number -le 15 ];
do
    echo "number is $number"
    number=$(( number + 4 ))
done    

echo " "
echo "bye"

echo "we continue.."
---------------------
OUTPUT:
some lines of codes here
number is 1
number is 5
number is 9
number is 13
 
bye
we continue..
----------------------------

NOTE: Be aware of the using of the while loops, because if the conditions is not matched then loop will run for indefinite times.

----------------------------------------------------------------------------

11. sleep command:

we can use the sleep command in loops to delay some time on termianl. e.g:

-----
#! /bin/bash


echo "some lines of codes here"

for i in {0..10}
do
    echo "number :  $i"
    sleep 0.5
done

echo " "
echo "bye"  
-------
OUTPUT:
some lines of codes here
number :    0
number :    1
number :    2
number :    3
number :    4
number :    5
number :    6
number :    7
number :    8
number :    9
number :    10
 
bye
--------------------

NOTE: we can stop exectuion of the program either ctrl+c or ctrl+z .

--------------


12. Case. we can use the case like switch statement in java.

for e.g:
#! /bin/bash


echo "select an option... "
echo " type 1 to Do A"
echo " type 2 to Do B"
echo " type 3 to Do C"
echo " type 4 to Do D"
read choice

case $choice in
    1)
        echo " You choose A "
        ;;
    2)
        echo " You choose B "
        ;;
    3)
        echo " You choose C "
        ;;
    4)
        echo " You choose D "
        ;;

    *)
        echo " None of the Above "    
        
esac

echo "END"      
-----------
OUTPUT:

select an option... 
 type 1 to Do A
 type 2 to Do B
 type 3 to Do C
 type 4 to Do D
3
 You choose C 
END

--------------

Q.so what kind of options we can choose in case?
Ans. we can choose anytype. if you type string then you can choose string as well.


#! /bin/bash


echo "type character,number or anything... "
read choice

case $choice in
    [0-9])
        echo " You typed a number "
        ;;
    1[2-8])
        echo " You typed a number between 12-18 "
        ;;  
    [a-z])
        echo " You typed the character in small case "
        ;;
    [A-Z])
        echo " You you typed the character in Upper case "
        ;;

    *)
        echo " None of the Above "  
        
esac

echo "END"      
-----------
OUTPUT:
Rajs-MacBook-Air:shell-scripts rajkhare$ ./case.sh 
type character,number or anything... 
12
 You typed a number between 12-18 
END
----


13. Exit status.
Every command in linux system has the exit status that is a numeric value.
if 0 - execute successfully
if non 0 then not execute successfully.

we can check the exit status by $?

for e.g:
-----
$ pwd
/Users/rajkhare/Raj/Udemy/Bash-Shell-Scripting
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ echo $?
0
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ pwd -adfdfd
-bash: pwd: -a: invalid option
pwd: usage: pwd [-LP]
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ echo $?
1
Rajs-MacBook-Air:Bash-Shell-Scripting rajkhare$ 
---------------

exit status also mentioned on the manual page of every command.

for e.g
---
man pwd
..
..
EXIT STATUS
     The pwd utility exits 0 on success, and >0 if an error occurs.
----------------------------

exit status are important in shell scripting becasue you can take some action based on the exit status you received.


14. Functions:
functions is the chunk of codes that you can use many times in the script.

e.g:
===
#! /bin/bash


mydate(){
    echo "today is: "
     date
    echo "have a GREAT day !"
}

echo "start here"
mydate
echo "move on.."     
------
OUTPUT:
start here
today is: 
Wed Feb 14 04:51:54 IST 2024
have a GREAT day !
move on..
-------
=======

14a) the great things about function is we can give the inputs to that.
e.g:
====
#! /bin/bash


mydate(){
    echo "today is: "
     date
    echo "have a GREAT day !"
}

hello2(){
    echo "Hello Mr. $1 "
    echo "Hello Mr. $2 too "
}


echo "start here"
mydate
echo "-------------"
hello2 "Raj" "Khare"
echo "move on.."     
---------
OUTPUT:
start here
today is: 
Wed Feb 14 04:57:45 IST 2024
have a GREAT day !
-------------
Hello Mr. Raj 
Hello Mr. Khare too 
move on..
-----
=========

Note: here $1 -> first input
           $2 -> second input

-------------

14b)We can also return the value whatever we want.

e.g:
=======
#! /bin/bash


mydate(){
    echo "today is: "
     date
    echo "have a GREAT day !"
}

hello2(){
    echo "Hello Mr. $1 "
    echo "Hello Mr. $2 too "
    return 35
}


echo "start here"
mydate
echo "-------------"
hello2 "Raj" "Khare"
echo "func return value is: $?"
echo "move on.."     
--------
OUTPUT:
start here
today is: 
Wed Feb 14 05:03:35 IST 2024
have a GREAT day !
-------------
Hello Mr. Raj 
Hello Mr. Khare too 
func return value is: 35
move on..
-------------------



15. Scope of the variable:

Shell scripting is different from other programming language. if you declare the variable inside the function also but it always declared as a global variable.

so use as the local variable you should put the keyword 'local' before the name of variable at the time of declaring it.

e.g:
=====
#! /bin/bash

myfuncion(){

    local var1="Eggs"
    var2="Salad"

    echo "var1 value inside myfuncion: $var1"
    echo "var2 value inside myfuncion: $var2"
}

echo "Program start here..."

myfunction

echo "var1 value OUTSIDE myfuncion: $var1"
echo "var2 value OUTSIDE myfuncion: $var2"

echo "Program end here..."
--------
OUTPUT:

Program start here...
var1 value inside myfuncion: Eggs
var2 value inside myfuncion: Salad
var1 value OUTSIDE myfuncion: 
var2 value OUTSIDE myfuncion: Salad
Program end here...

------------

Note: it really encourages that always use the local variable so it will not mess with some other values outside the function.















































